/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fresto.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ResourceImplEdge implements org.apache.thrift.TBase<ResourceImplEdge, ResourceImplEdge._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceImplEdge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceImplEdge");

  private static final org.apache.thrift.protocol.TField RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("type_signature", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResourceImplEdgeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResourceImplEdgeTupleSchemeFactory());
  }

  public EndPointResourceID resource; // required
  public TypeSignatureID type_signature; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESOURCE((short)1, "resource"),
    TYPE_SIGNATURE((short)2, "type_signature");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOURCE
          return RESOURCE;
        case 2: // TYPE_SIGNATURE
          return TYPE_SIGNATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("resource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EndPointResourceID.class)));
    tmpMap.put(_Fields.TYPE_SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("type_signature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TypeSignatureID.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceImplEdge.class, metaDataMap);
  }

  public ResourceImplEdge() {
  }

  public ResourceImplEdge(
    EndPointResourceID resource,
    TypeSignatureID type_signature)
  {
    this();
    this.resource = resource;
    this.type_signature = type_signature;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResourceImplEdge(ResourceImplEdge other) {
    if (other.isSetResource()) {
      this.resource = new EndPointResourceID(other.resource);
    }
    if (other.isSetType_signature()) {
      this.type_signature = new TypeSignatureID(other.type_signature);
    }
  }

  public ResourceImplEdge deepCopy() {
    return new ResourceImplEdge(this);
  }

  @Override
  public void clear() {
    this.resource = null;
    this.type_signature = null;
  }

  public EndPointResourceID getResource() {
    return this.resource;
  }

  public ResourceImplEdge setResource(EndPointResourceID resource) {
    this.resource = resource;
    return this;
  }

  public void unsetResource() {
    this.resource = null;
  }

  /** Returns true if field resource is set (has been assigned a value) and false otherwise */
  public boolean isSetResource() {
    return this.resource != null;
  }

  public void setResourceIsSet(boolean value) {
    if (!value) {
      this.resource = null;
    }
  }

  public TypeSignatureID getType_signature() {
    return this.type_signature;
  }

  public ResourceImplEdge setType_signature(TypeSignatureID type_signature) {
    this.type_signature = type_signature;
    return this;
  }

  public void unsetType_signature() {
    this.type_signature = null;
  }

  /** Returns true if field type_signature is set (has been assigned a value) and false otherwise */
  public boolean isSetType_signature() {
    return this.type_signature != null;
  }

  public void setType_signatureIsSet(boolean value) {
    if (!value) {
      this.type_signature = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESOURCE:
      if (value == null) {
        unsetResource();
      } else {
        setResource((EndPointResourceID)value);
      }
      break;

    case TYPE_SIGNATURE:
      if (value == null) {
        unsetType_signature();
      } else {
        setType_signature((TypeSignatureID)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOURCE:
      return getResource();

    case TYPE_SIGNATURE:
      return getType_signature();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESOURCE:
      return isSetResource();
    case TYPE_SIGNATURE:
      return isSetType_signature();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResourceImplEdge)
      return this.equals((ResourceImplEdge)that);
    return false;
  }

  public boolean equals(ResourceImplEdge that) {
    if (that == null)
      return false;

    boolean this_present_resource = true && this.isSetResource();
    boolean that_present_resource = true && that.isSetResource();
    if (this_present_resource || that_present_resource) {
      if (!(this_present_resource && that_present_resource))
        return false;
      if (!this.resource.equals(that.resource))
        return false;
    }

    boolean this_present_type_signature = true && this.isSetType_signature();
    boolean that_present_type_signature = true && that.isSetType_signature();
    if (this_present_type_signature || that_present_type_signature) {
      if (!(this_present_type_signature && that_present_type_signature))
        return false;
      if (!this.type_signature.equals(that.type_signature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ResourceImplEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResource()).compareTo(other.isSetResource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource, other.resource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType_signature()).compareTo(other.isSetType_signature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType_signature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_signature, other.type_signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResourceImplEdge(");
    boolean first = true;

    sb.append("resource:");
    if (this.resource == null) {
      sb.append("null");
    } else {
      sb.append(this.resource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type_signature:");
    if (this.type_signature == null) {
      sb.append("null");
    } else {
      sb.append(this.type_signature);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (resource == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resource' was not present! Struct: " + toString());
    }
    if (type_signature == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type_signature' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResourceImplEdgeStandardSchemeFactory implements SchemeFactory {
    public ResourceImplEdgeStandardScheme getScheme() {
      return new ResourceImplEdgeStandardScheme();
    }
  }

  private static class ResourceImplEdgeStandardScheme extends StandardScheme<ResourceImplEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceImplEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource = new EndPointResourceID();
              struct.resource.read(iprot);
              struct.setResourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE_SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.type_signature = new TypeSignatureID();
              struct.type_signature.read(iprot);
              struct.setType_signatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceImplEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resource != null) {
        oprot.writeFieldBegin(RESOURCE_FIELD_DESC);
        struct.resource.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.type_signature != null) {
        oprot.writeFieldBegin(TYPE_SIGNATURE_FIELD_DESC);
        struct.type_signature.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResourceImplEdgeTupleSchemeFactory implements SchemeFactory {
    public ResourceImplEdgeTupleScheme getScheme() {
      return new ResourceImplEdgeTupleScheme();
    }
  }

  private static class ResourceImplEdgeTupleScheme extends TupleScheme<ResourceImplEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResourceImplEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.resource.write(oprot);
      struct.type_signature.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResourceImplEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.resource = new EndPointResourceID();
      struct.resource.read(iprot);
      struct.setResourceIsSet(true);
      struct.type_signature = new TypeSignatureID();
      struct.type_signature.read(iprot);
      struct.setType_signatureIsSet(true);
    }
  }

}

