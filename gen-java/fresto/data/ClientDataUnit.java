/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fresto.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientDataUnit extends org.apache.thrift.TUnion<ClientDataUnit, ClientDataUnit._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientDataUnit");
  private static final org.apache.thrift.protocol.TField CLIENT_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("client_property", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_property", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("request_property", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField RESPONSE_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("response_property", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_REQUEST_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("client_request_edge", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_RESOURCE_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("request_resource_edge", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField RESOURCE_RESPONSE_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_response_edge", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField RESPONSE_CLIENT_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("response_client_edge", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_PROPERTY((short)1, "client_property"),
    RESOURCE_PROPERTY((short)2, "resource_property"),
    REQUEST_PROPERTY((short)3, "request_property"),
    RESPONSE_PROPERTY((short)4, "response_property"),
    CLIENT_REQUEST_EDGE((short)5, "client_request_edge"),
    REQUEST_RESOURCE_EDGE((short)6, "request_resource_edge"),
    RESOURCE_RESPONSE_EDGE((short)7, "resource_response_edge"),
    RESPONSE_CLIENT_EDGE((short)8, "response_client_edge");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_PROPERTY
          return CLIENT_PROPERTY;
        case 2: // RESOURCE_PROPERTY
          return RESOURCE_PROPERTY;
        case 3: // REQUEST_PROPERTY
          return REQUEST_PROPERTY;
        case 4: // RESPONSE_PROPERTY
          return RESPONSE_PROPERTY;
        case 5: // CLIENT_REQUEST_EDGE
          return CLIENT_REQUEST_EDGE;
        case 6: // REQUEST_RESOURCE_EDGE
          return REQUEST_RESOURCE_EDGE;
        case 7: // RESOURCE_RESPONSE_EDGE
          return RESOURCE_RESPONSE_EDGE;
        case 8: // RESPONSE_CLIENT_EDGE
          return RESPONSE_CLIENT_EDGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("client_property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientProperty.class)));
    tmpMap.put(_Fields.RESOURCE_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("resource_property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResourceProperty.class)));
    tmpMap.put(_Fields.REQUEST_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("request_property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestProperty.class)));
    tmpMap.put(_Fields.RESPONSE_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("response_property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseProperty.class)));
    tmpMap.put(_Fields.CLIENT_REQUEST_EDGE, new org.apache.thrift.meta_data.FieldMetaData("client_request_edge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientRequestEdge.class)));
    tmpMap.put(_Fields.REQUEST_RESOURCE_EDGE, new org.apache.thrift.meta_data.FieldMetaData("request_resource_edge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestResourceEdge.class)));
    tmpMap.put(_Fields.RESOURCE_RESPONSE_EDGE, new org.apache.thrift.meta_data.FieldMetaData("resource_response_edge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResourceResponseEdge.class)));
    tmpMap.put(_Fields.RESPONSE_CLIENT_EDGE, new org.apache.thrift.meta_data.FieldMetaData("response_client_edge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseClientEdge.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientDataUnit.class, metaDataMap);
  }

  public ClientDataUnit() {
    super();
  }

  public ClientDataUnit(_Fields setField, Object value) {
    super(setField, value);
  }

  public ClientDataUnit(ClientDataUnit other) {
    super(other);
  }
  public ClientDataUnit deepCopy() {
    return new ClientDataUnit(this);
  }

  public static ClientDataUnit client_property(ClientProperty value) {
    ClientDataUnit x = new ClientDataUnit();
    x.setClient_property(value);
    return x;
  }

  public static ClientDataUnit resource_property(ResourceProperty value) {
    ClientDataUnit x = new ClientDataUnit();
    x.setResource_property(value);
    return x;
  }

  public static ClientDataUnit request_property(RequestProperty value) {
    ClientDataUnit x = new ClientDataUnit();
    x.setRequest_property(value);
    return x;
  }

  public static ClientDataUnit response_property(ResponseProperty value) {
    ClientDataUnit x = new ClientDataUnit();
    x.setResponse_property(value);
    return x;
  }

  public static ClientDataUnit client_request_edge(ClientRequestEdge value) {
    ClientDataUnit x = new ClientDataUnit();
    x.setClient_request_edge(value);
    return x;
  }

  public static ClientDataUnit request_resource_edge(RequestResourceEdge value) {
    ClientDataUnit x = new ClientDataUnit();
    x.setRequest_resource_edge(value);
    return x;
  }

  public static ClientDataUnit resource_response_edge(ResourceResponseEdge value) {
    ClientDataUnit x = new ClientDataUnit();
    x.setResource_response_edge(value);
    return x;
  }

  public static ClientDataUnit response_client_edge(ResponseClientEdge value) {
    ClientDataUnit x = new ClientDataUnit();
    x.setResponse_client_edge(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case CLIENT_PROPERTY:
        if (value instanceof ClientProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ClientProperty for field 'client_property', but got " + value.getClass().getSimpleName());
      case RESOURCE_PROPERTY:
        if (value instanceof ResourceProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ResourceProperty for field 'resource_property', but got " + value.getClass().getSimpleName());
      case REQUEST_PROPERTY:
        if (value instanceof RequestProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RequestProperty for field 'request_property', but got " + value.getClass().getSimpleName());
      case RESPONSE_PROPERTY:
        if (value instanceof ResponseProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ResponseProperty for field 'response_property', but got " + value.getClass().getSimpleName());
      case CLIENT_REQUEST_EDGE:
        if (value instanceof ClientRequestEdge) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ClientRequestEdge for field 'client_request_edge', but got " + value.getClass().getSimpleName());
      case REQUEST_RESOURCE_EDGE:
        if (value instanceof RequestResourceEdge) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RequestResourceEdge for field 'request_resource_edge', but got " + value.getClass().getSimpleName());
      case RESOURCE_RESPONSE_EDGE:
        if (value instanceof ResourceResponseEdge) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ResourceResponseEdge for field 'resource_response_edge', but got " + value.getClass().getSimpleName());
      case RESPONSE_CLIENT_EDGE:
        if (value instanceof ResponseClientEdge) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ResponseClientEdge for field 'response_client_edge', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case CLIENT_PROPERTY:
          if (field.type == CLIENT_PROPERTY_FIELD_DESC.type) {
            ClientProperty client_property;
            client_property = new ClientProperty();
            client_property.read(iprot);
            return client_property;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RESOURCE_PROPERTY:
          if (field.type == RESOURCE_PROPERTY_FIELD_DESC.type) {
            ResourceProperty resource_property;
            resource_property = new ResourceProperty();
            resource_property.read(iprot);
            return resource_property;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REQUEST_PROPERTY:
          if (field.type == REQUEST_PROPERTY_FIELD_DESC.type) {
            RequestProperty request_property;
            request_property = new RequestProperty();
            request_property.read(iprot);
            return request_property;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RESPONSE_PROPERTY:
          if (field.type == RESPONSE_PROPERTY_FIELD_DESC.type) {
            ResponseProperty response_property;
            response_property = new ResponseProperty();
            response_property.read(iprot);
            return response_property;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CLIENT_REQUEST_EDGE:
          if (field.type == CLIENT_REQUEST_EDGE_FIELD_DESC.type) {
            ClientRequestEdge client_request_edge;
            client_request_edge = new ClientRequestEdge();
            client_request_edge.read(iprot);
            return client_request_edge;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REQUEST_RESOURCE_EDGE:
          if (field.type == REQUEST_RESOURCE_EDGE_FIELD_DESC.type) {
            RequestResourceEdge request_resource_edge;
            request_resource_edge = new RequestResourceEdge();
            request_resource_edge.read(iprot);
            return request_resource_edge;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RESOURCE_RESPONSE_EDGE:
          if (field.type == RESOURCE_RESPONSE_EDGE_FIELD_DESC.type) {
            ResourceResponseEdge resource_response_edge;
            resource_response_edge = new ResourceResponseEdge();
            resource_response_edge.read(iprot);
            return resource_response_edge;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RESPONSE_CLIENT_EDGE:
          if (field.type == RESPONSE_CLIENT_EDGE_FIELD_DESC.type) {
            ResponseClientEdge response_client_edge;
            response_client_edge = new ResponseClientEdge();
            response_client_edge.read(iprot);
            return response_client_edge;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case CLIENT_PROPERTY:
        ClientProperty client_property = (ClientProperty)value_;
        client_property.write(oprot);
        return;
      case RESOURCE_PROPERTY:
        ResourceProperty resource_property = (ResourceProperty)value_;
        resource_property.write(oprot);
        return;
      case REQUEST_PROPERTY:
        RequestProperty request_property = (RequestProperty)value_;
        request_property.write(oprot);
        return;
      case RESPONSE_PROPERTY:
        ResponseProperty response_property = (ResponseProperty)value_;
        response_property.write(oprot);
        return;
      case CLIENT_REQUEST_EDGE:
        ClientRequestEdge client_request_edge = (ClientRequestEdge)value_;
        client_request_edge.write(oprot);
        return;
      case REQUEST_RESOURCE_EDGE:
        RequestResourceEdge request_resource_edge = (RequestResourceEdge)value_;
        request_resource_edge.write(oprot);
        return;
      case RESOURCE_RESPONSE_EDGE:
        ResourceResponseEdge resource_response_edge = (ResourceResponseEdge)value_;
        resource_response_edge.write(oprot);
        return;
      case RESPONSE_CLIENT_EDGE:
        ResponseClientEdge response_client_edge = (ResponseClientEdge)value_;
        response_client_edge.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case CLIENT_PROPERTY:
          ClientProperty client_property;
          client_property = new ClientProperty();
          client_property.read(iprot);
          return client_property;
        case RESOURCE_PROPERTY:
          ResourceProperty resource_property;
          resource_property = new ResourceProperty();
          resource_property.read(iprot);
          return resource_property;
        case REQUEST_PROPERTY:
          RequestProperty request_property;
          request_property = new RequestProperty();
          request_property.read(iprot);
          return request_property;
        case RESPONSE_PROPERTY:
          ResponseProperty response_property;
          response_property = new ResponseProperty();
          response_property.read(iprot);
          return response_property;
        case CLIENT_REQUEST_EDGE:
          ClientRequestEdge client_request_edge;
          client_request_edge = new ClientRequestEdge();
          client_request_edge.read(iprot);
          return client_request_edge;
        case REQUEST_RESOURCE_EDGE:
          RequestResourceEdge request_resource_edge;
          request_resource_edge = new RequestResourceEdge();
          request_resource_edge.read(iprot);
          return request_resource_edge;
        case RESOURCE_RESPONSE_EDGE:
          ResourceResponseEdge resource_response_edge;
          resource_response_edge = new ResourceResponseEdge();
          resource_response_edge.read(iprot);
          return resource_response_edge;
        case RESPONSE_CLIENT_EDGE:
          ResponseClientEdge response_client_edge;
          response_client_edge = new ResponseClientEdge();
          response_client_edge.read(iprot);
          return response_client_edge;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case CLIENT_PROPERTY:
        ClientProperty client_property = (ClientProperty)value_;
        client_property.write(oprot);
        return;
      case RESOURCE_PROPERTY:
        ResourceProperty resource_property = (ResourceProperty)value_;
        resource_property.write(oprot);
        return;
      case REQUEST_PROPERTY:
        RequestProperty request_property = (RequestProperty)value_;
        request_property.write(oprot);
        return;
      case RESPONSE_PROPERTY:
        ResponseProperty response_property = (ResponseProperty)value_;
        response_property.write(oprot);
        return;
      case CLIENT_REQUEST_EDGE:
        ClientRequestEdge client_request_edge = (ClientRequestEdge)value_;
        client_request_edge.write(oprot);
        return;
      case REQUEST_RESOURCE_EDGE:
        RequestResourceEdge request_resource_edge = (RequestResourceEdge)value_;
        request_resource_edge.write(oprot);
        return;
      case RESOURCE_RESPONSE_EDGE:
        ResourceResponseEdge resource_response_edge = (ResourceResponseEdge)value_;
        resource_response_edge.write(oprot);
        return;
      case RESPONSE_CLIENT_EDGE:
        ResponseClientEdge response_client_edge = (ResponseClientEdge)value_;
        response_client_edge.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case CLIENT_PROPERTY:
        return CLIENT_PROPERTY_FIELD_DESC;
      case RESOURCE_PROPERTY:
        return RESOURCE_PROPERTY_FIELD_DESC;
      case REQUEST_PROPERTY:
        return REQUEST_PROPERTY_FIELD_DESC;
      case RESPONSE_PROPERTY:
        return RESPONSE_PROPERTY_FIELD_DESC;
      case CLIENT_REQUEST_EDGE:
        return CLIENT_REQUEST_EDGE_FIELD_DESC;
      case REQUEST_RESOURCE_EDGE:
        return REQUEST_RESOURCE_EDGE_FIELD_DESC;
      case RESOURCE_RESPONSE_EDGE:
        return RESOURCE_RESPONSE_EDGE_FIELD_DESC;
      case RESPONSE_CLIENT_EDGE:
        return RESPONSE_CLIENT_EDGE_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public ClientProperty getClient_property() {
    if (getSetField() == _Fields.CLIENT_PROPERTY) {
      return (ClientProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'client_property' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setClient_property(ClientProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CLIENT_PROPERTY;
    value_ = value;
  }

  public ResourceProperty getResource_property() {
    if (getSetField() == _Fields.RESOURCE_PROPERTY) {
      return (ResourceProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'resource_property' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setResource_property(ResourceProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RESOURCE_PROPERTY;
    value_ = value;
  }

  public RequestProperty getRequest_property() {
    if (getSetField() == _Fields.REQUEST_PROPERTY) {
      return (RequestProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'request_property' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRequest_property(RequestProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REQUEST_PROPERTY;
    value_ = value;
  }

  public ResponseProperty getResponse_property() {
    if (getSetField() == _Fields.RESPONSE_PROPERTY) {
      return (ResponseProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'response_property' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setResponse_property(ResponseProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RESPONSE_PROPERTY;
    value_ = value;
  }

  public ClientRequestEdge getClient_request_edge() {
    if (getSetField() == _Fields.CLIENT_REQUEST_EDGE) {
      return (ClientRequestEdge)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'client_request_edge' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setClient_request_edge(ClientRequestEdge value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CLIENT_REQUEST_EDGE;
    value_ = value;
  }

  public RequestResourceEdge getRequest_resource_edge() {
    if (getSetField() == _Fields.REQUEST_RESOURCE_EDGE) {
      return (RequestResourceEdge)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'request_resource_edge' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRequest_resource_edge(RequestResourceEdge value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REQUEST_RESOURCE_EDGE;
    value_ = value;
  }

  public ResourceResponseEdge getResource_response_edge() {
    if (getSetField() == _Fields.RESOURCE_RESPONSE_EDGE) {
      return (ResourceResponseEdge)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'resource_response_edge' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setResource_response_edge(ResourceResponseEdge value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RESOURCE_RESPONSE_EDGE;
    value_ = value;
  }

  public ResponseClientEdge getResponse_client_edge() {
    if (getSetField() == _Fields.RESPONSE_CLIENT_EDGE) {
      return (ResponseClientEdge)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'response_client_edge' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setResponse_client_edge(ResponseClientEdge value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RESPONSE_CLIENT_EDGE;
    value_ = value;
  }

  public boolean isSetClient_property() {
    return setField_ == _Fields.CLIENT_PROPERTY;
  }


  public boolean isSetResource_property() {
    return setField_ == _Fields.RESOURCE_PROPERTY;
  }


  public boolean isSetRequest_property() {
    return setField_ == _Fields.REQUEST_PROPERTY;
  }


  public boolean isSetResponse_property() {
    return setField_ == _Fields.RESPONSE_PROPERTY;
  }


  public boolean isSetClient_request_edge() {
    return setField_ == _Fields.CLIENT_REQUEST_EDGE;
  }


  public boolean isSetRequest_resource_edge() {
    return setField_ == _Fields.REQUEST_RESOURCE_EDGE;
  }


  public boolean isSetResource_response_edge() {
    return setField_ == _Fields.RESOURCE_RESPONSE_EDGE;
  }


  public boolean isSetResponse_client_edge() {
    return setField_ == _Fields.RESPONSE_CLIENT_EDGE;
  }


  public boolean equals(Object other) {
    if (other instanceof ClientDataUnit) {
      return equals((ClientDataUnit)other);
    } else {
      return false;
    }
  }

  public boolean equals(ClientDataUnit other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ClientDataUnit other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
